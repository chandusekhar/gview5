@inherits BaseHandler
@implements IDisposable

@inject IconService IconService
@inject ICartoApplicationService CartoApplication
@inject IApplicationScope AppScope
@inject PluginManagerService PluginManager
@inject CartoEventBusService EventBus

<MudTreeView  Items="TreeNodes"
              ExpandOnDoubleClick="true" 
              MultiSelection="false" 
              Hover="true" Dense="true" @key="@fullReloadKey">
    <ItemTemplate>
        @if(context is TocLayerNode)
        {
            <div style="white-space:nowrap; overflow-x:hidden;"
                     class="treenode">
                <MudTreeViewItem Value="@context"
                                 Items="@context.Children"
                                 CanExpand="@context.HasChildren"
                                 Expanded="@context.IsExpanded"
                                 ExpandedChanged="@((expanded) => OnNodeExpandedChanged(context, expanded))"
                                 @onclick="@((e) => OnNodeClickAsync(context,e))">
                       <Content>
                            <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChildren" ExpandedIcon="@Icons.Material.Rounded.ArrowRight" />
                            <MudCheckBox T="bool" 
                                         Checked="@context.IsChecked"
                                         CheckedChanged="@((e) => OnCheckboxClickedAsync(context,e))" />
                            <MudText>@context.Text</MudText>
                       </Content>
                </MudTreeViewItem>
            </div>
            
        }
        else if(context is TocLegendNode)
        {
            <div style="white-space:nowrap; overflow-x:hidden;"
                 class="treenode">
            <MudTreeViewItem Value="@context">
                <Content>
                    <div style="white-space:nowrap; overflow-x:hidden;">
                        <LegendTreeItem ParentElement="context.TocElement" />
                    </div>
                </Content>
            </MudTreeViewItem>
            </div>
        }
        else 
        {
            <div style="white-space:nowrap; overflow-x:hidden;"
                 class="treenode">
                <MudTreeViewItem Value="@context"
                                 Items="@context.Children"
                                 CanExpand="true"
                                 Expanded="@context.IsExpanded"
                                 ExpandedChanged="@((expanded) => OnNodeExpandedChanged(context, expanded))"
                                 @onclick="@((e) => OnNodeClickAsync(context,e))">
                        <Content>
                            <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="true" />
                            <MudCheckBox T="bool"
                                         Checked="@context.IsChecked"
                                         CheckedChanged="@((e) => OnCheckboxClickedAsync(context,e ))" />
                            <MudText Class="grouplayer-text">@context.Text</MudText>
                        </Content>
                </MudTreeViewItem>
            </div>
        }
    </ItemTemplate>
</MudTreeView>

@code {
    private HashSet<TocTreeNode> TreeNodes { get; set; } = new HashSet<TocTreeNode>();

    // force a full reload after rebuild
    // otherwise some items (legends) will be cached!
    private object fullReloadKey = Guid.NewGuid();

    protected override Task OnInitializedAsync() => base.HandleAsync(async () =>
    {
        await base.OnInitializedAsync();

        await SetAppScope((ICartoApplicationScopeService)AppScope);
    });

    private void OnNodeExpandedChanged(TocTreeNode node, bool expanded) => base.Handle(() =>
    {
        node.IsExpanded = expanded;
    });

    private Task OnCheckboxClickedAsync(TocTreeNode node, bool isChecked) => base.HandleAsync(async () =>
    {
        node.IsChecked = isChecked;

        await EventBus.FireRefreshMapAsync(500);
    });

    private Task OnNodeClickAsync(TocTreeNode node, MouseEventArgs e) => base.HandleAsync(async () =>
    {
        await EventBus.FireSelectedTocTreeNodeChanged(node); 
    });
}