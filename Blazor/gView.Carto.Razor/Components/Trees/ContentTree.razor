@inherits BaseHandler
@implements IDisposable

@inject IconService IconService
@inject ICartoApplicationService CartoApplication
@inject IApplicationScope AppScope
@inject PluginManagerService PluginManager
@inject CartoEventBusService EventBus

<MudTreeView  Items="TreeNodes"
              ExpandOnClick="true" 
              MultiSelection="true"
              Hover="true" Dense="true" @key="@fullReloadKey">
    <ItemTemplate>
        @if(context is TocLayerNode)
        {
            @if(context.TocElement.HasLegendItems())
            {
                <div style="white-space:nowrap; overflow-x:hidden;"
                     class="treenode">
                    <MudTreeViewItem Value="@context"
                                     Items="@context.Children"
                                     CanExpand="@context.HasChildren"
                                     Expanded="@context.IsExpanded"
                                     Selected="@context.IsSelected"
                                     ExpandedIcon="@Icons.Material.Rounded.ArrowRight"
                                     ExpandedChanged="@((expanded) => OnNodeExpandedChanged(context, expanded))"
                                     Text="@context.Text"
                                     @onclick="@(() => OnNodeClickAsync(context))">
                        @if (context.TocElement.HasLegendItems())
                        {
                            <div style="white-space:nowrap; overflow-x:hidden;">
                                <LegendTreeItem ParentElement="((TocLayerNode)context).TocElement" />
                            </div>
                        }
                    </MudTreeViewItem>
                </div>
            } 
            else
            {
                <div style="white-space:nowrap; overflow-x:hidden;"
                     class="treenode">
                    <MudTreeViewItem Value="@context"
                                     Items="@context.Children"
                                     CanExpand="false"
                                     Selected="@context.IsSelected"
                                     Text="@context.Text"
                                     @onclick="@(() => OnNodeClickAsync(context))">
                    </MudTreeViewItem>
                </div>
            }
        } 
        else 
        {
            <div style="white-space:nowrap; overflow-x:hidden;"
                 class="treenode">
                <MudTreeViewItem Value="@context"
                             
                                  Items="@context.Children"
                                  CanExpand="@context.HasChildren"
                                  Expanded="@context.IsExpanded"
                                  Selected="@context.IsSelected"
                                  ExpandedChanged="@((expanded) => OnNodeExpandedChanged(context, expanded))"
                                  Text="@context.Text"
                                  TextClass="grouplayer-text"
                                  @onclick="@(() => OnNodeClickAsync(context))">      
                </MudTreeViewItem>
            </div>
        }
    </ItemTemplate>
</MudTreeView>

@code {
    private HashSet<TocTreeNode> TreeNodes { get; set; } = new HashSet<TocTreeNode>();

    // force a full reload after rebuild
    // otherwise some items (legends) will be cached!
    private object fullReloadKey = Guid.NewGuid();

    async protected override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await SetAppScope((ICartoApplicationScopeService)AppScope);        
    }

    private Task OnNodeExpandedChanged(TocTreeNode node, bool expanded) => base.HandleAsync(async () =>
    {
        node.IsExpanded = expanded;
    });

    private Task OnNodeClickAsync(TocTreeNode node) => base.HandleAsync(async () =>
    {
        await EventBus.FireSelectedTocTreeNodeChanged(node);
    });    
}