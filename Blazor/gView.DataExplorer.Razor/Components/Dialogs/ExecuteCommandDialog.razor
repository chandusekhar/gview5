@inherits ModalDialogFormBase<ExecuteCommandModel>

<ModalDialogFormBase T="ExecuteCommandModel"
                     OnDialogClose="base.OnDialogClose"
                     Model="base.Model">
    <FormContent>
        <pre style="width:800px;height:500px;background-color:#333;color:#eee;padding:8px;white-space:pre-wrap">
            @LoggerOutput.ToString()
        </pre>
    </FormContent>
    <DialogButtons>

    </DialogButtons>
</ModalDialogFormBase>

@code {
    private System.Text.StringBuilder LoggerOutput = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Model.Result = true;

        var task = Task.Run(async () =>
        {
            var logger = new Logger(this);
            
            foreach(var commandItem in Model.CommandItems)
            {
                var result = await commandItem.Command.Run(commandItem.Parameters, logger);

                logger.LogLine($"Finished {(result ? "successful" : "with errors")}");
                Model.Result &= result;
            }
        });
    }

    private void Refresh()
    {
        InvokeAsync(StateHasChanged);
    }

    private class Logger : Cmd.Core.Abstraction.ICommandLogger
    {
        private bool _requireNewline=false;
        private readonly ExecuteCommandDialog _parent;

        public Logger(ExecuteCommandDialog parent)
        {
            _parent = parent;
        }

        public void Log(string message)
        {
            _parent.LoggerOutput.Append(message);
            _requireNewline = true;

            _parent.Refresh();
        }

        public void LogLine(string message)
        {
            if(_requireNewline)
            {
                _parent.LoggerOutput.AppendLine("");
            }

            _parent.LoggerOutput.AppendLine(message);
            _requireNewline = false;

            _parent.Refresh();
        }
    }
}