@inherits BaseHandler
@inject IconService Icons
@inject IExplorerApplicationService ExplorerApplication

@if (selectedRoot != null)
{
    currentListExplorerObjects.Clear();
    currentListExplorerObjects.AddRange(selectedRoot is IExplorerParentObject ?
            ((IExplorerParentObject)selectedRoot).ChildObjects().Result :
            Array.Empty<IExplorerObject>());

    @foreach (var childObject in currentListExplorerObjects.ToArray().Reverse())
    {
        if (!rootExplorerObjects.Contains(childObject)) {
            rootExplorerObjects.Insert(rootExplorerObjects.IndexOf(selectedRoot) + 1, childObject);
            levels[childObject] = levels[selectedRoot] + 1;
        }
    }

    <MudDialog Style="width:980px">
        <DialogContent>
            <MudSelect @bind-Value="@selectedRoot"
                        Label="Folder/Path"
                        Class="explorer-dialog-root-select"
                        Variant="Variant.Outlined"
                        Dense="true">
                @foreach (var rootExplorerObject in rootExplorerObjects)
                {
                    <MudSelectItem Value="@rootExplorerObject">
                        <div class="explorer-dialog-root-select-item" style="display: flex; align-items: center; padding-left:@(levels[rootExplorerObject]*24)px">
                            <MudIcon Icon="@Icons.FromString(rootExplorerObject.Icon)" Style="margin-right: 6px;" />
                            <MudText>@rootExplorerObject.Name</MudText>
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>

            <MudPaper Elevation="2">
                <MudList Clickable="true" Style=" height:600px;overflow:auto" Dense="true">
                    @if (levels[selectedRoot] > 0)
                    {
                        <MudListItem OnClick="MoveUp">
                            <div style="display: flex; align-items: center;">
                                <MudIcon Icon="@Icons.FromString("basic:triangle-left-up")" Style="margin-right: 6px;" />
                                <MudText>..</MudText>
                            </div>
                        </MudListItem>
                    }
                    @foreach (var exObject in currentListExplorerObjects)
                    {
                        <MudListItem @ondblclick="() => ListItemDoubleClick(exObject)"
                                     Class="@($"explorer-dialog-item {(Model.Result.ExplorerObjects.Contains(exObject) ? "selected" : "")}")"
                                     OnClick="async (mEvent) => await ListItemCLick(mEvent, exObject)">
                            <div style="display: flex; align-items: center;" >
                                <MudIcon Icon="@Icons.FromString(exObject.Icon)" Style="margin-right: 6px;" />
                                <MudText>@exObject.Name</MudText>
                            </div>
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>

            @if(Model.Mode == ExploerDialogMode.Open) 
            {
                <MudTextField Value="@String.Join(", ",Model.Result.ExplorerObjects.Select(e=>e.Name))" 
                              Label="Selected"
                              Required="true"
                              ReadOnly="true" 
                              Variant="Variant.Filled" />
            } 
            else if(Model.Mode == ExploerDialogMode.Save)
            {
                <MudTextField @bind-Value="Model.Result.Name" 
                              Required="true"
                              Label="Name"
                              Variant="Variant.Outlined" />
            }

            <MudSelect @bind-Value="selectedFilter" Variant="Variant.Outlined" Label="Filter">
            @foreach(var filter in Model.Filters)
            {
                    <MudSelectItem Value="@filter" />
            }
            </MudSelect>

        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Default" OnClick="Close">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Confirm</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    public ExplorerDialogModel Model = new()
        {
            Filters = new List<ExplorerDialogFilter> { new OpenFDBFeatureclassFilter() },
            Mode = ExploerDialogMode.Open
        };

    private List<IExplorerObject> rootExplorerObjects = new();
    private List<IExplorerObject> currentListExplorerObjects = new();
    private Dictionary<IExplorerObject, int> levels = new();
    private IExplorerObject? selectedRoot;
    private ExplorerDialogFilter? selectedFilter;


    protected override Task OnInitializedAsync()
        => HandleAsync(async () =>
        {
            #region Initialize Select

            selectedRoot = ExplorerApplication.RootExplorerObject;
            rootExplorerObjects.Add(selectedRoot);
            levels[selectedRoot] = 0;

            if (selectedRoot is IExplorerParentObject)
            {
                foreach (var exObject in await ((IExplorerParentObject)selectedRoot).ChildObjects())
                {
                    rootExplorerObjects.Add(exObject);
                    levels[exObject] = 1;
                }
            }

            selectedFilter = Model.Filters.FirstOrDefault();

            #endregion
        });

    private void ListItemDoubleClick(IExplorerObject exObject)
        => Handle(() =>
        {
            if (exObject is IExplorerParentObject)
            {
                selectedRoot = exObject;
                Model.Result.ExplorerObjects.Clear();
            }
        });

    private Task ListItemCLick(MouseEventArgs mEvent, IExplorerObject exObject)
    {
        return HandleAsync(async () =>
        {
            List<IExplorerObject> matchingExplorerObjects = new();

            #region Collect filter matching list items

            foreach (var item in currentListExplorerObjects) 
            {
                foreach (var filter in Model.Filters)
                {
                    if (await filter.Match(exObject))
                    {
                        matchingExplorerObjects.Add(item);
                        break;
                    }
                }
            }

            #endregion


            if(matchingExplorerObjects.Contains(exObject))
            {
                Model.Result.ExplorerObjects.ReplaceItems(
                    exObject.AddToSelection(Model.Result.ExplorerObjects, 
                                            matchingExplorerObjects,
                                            mEvent switch
                                            {
                                                { ShiftKey: true } => GenericAddToStrategy.AddAllBetweenLastItem,
                                                { CtrlKey: true } => GenericAddToStrategy.AddOrRemoveIfExists,
                                                _ => GenericAddToStrategy.RemoveOthers
                                            }));
            } 
            else
            {
                Model.Result.ExplorerObjects.Clear();
            }
        });
    }

    private void MoveUp()
    => Handle(() =>
        {
            if (selectedRoot != null)
            {
                var currentLevel = levels[selectedRoot];
                var currentIndex = rootExplorerObjects.IndexOf(selectedRoot);

                for (int i = currentIndex - 1; i >= 0; i--)
                {
                    if (levels[rootExplorerObjects[i]] < currentLevel)
                    {
                        selectedRoot = rootExplorerObjects[i];
                        break;
                    }
                }
            }

            Model.Result.ExplorerObjects.Clear();
        });

    virtual protected Task Submit() => Task.CompletedTask;
    virtual protected Task Close() => Task.CompletedTask;
}