@inherits ModalDialogFormBase<CreateNetworkFeatureClassModel>
@inject IApplicationScope AppScope

<ModalDialogFormBase T="CreateNetworkFeatureClassModel"
                     OnDialogClose="base.OnDialogClose"
                     Model="base.Model">
    <FormContent>
        <div style="min-width:800px; max-width:100%; min-height: 480px;">
            @if (pageIndex == 0)
            {
                <MudTextField Label="Name"
                               @bind-Value="Model.Result.Name" />
            }
            @if (pageIndex == 1)
            {
                <strong>Node Feature Classes</strong>
                @if (polylineFeatureClasses != null)
                {
                    <SelectableItemsControl ItemProperties="@(new[]{"Name"})" 
                                              SelectableItems="polylineFeatureClasses" 
                                              SelectionChanged="PolylineSelectionChanged" />
                }
            }
            @if (pageIndex == 2)
            {
                <strong>Point Feature Classes</strong>
                @if (pointFeatureClasses != null)
                {
                    <SelectableItemsControl ItemProperties="@(new[]{"Name"})"
                                              SelectableItems="pointFeatureClasses"
                                              SelectionChanged="PointSelectionChanged" />
                }
            }
            @if (pageIndex == 3)
            {
                <strong>Snapping</strong>
                <MudCheckBox Label="Use Snap Tolerance"
                              @bind-Checked="Model.Result.UseSnapTolerance" />

                <MudTextField Label="Snap Tolerance"
                               @bind-Value="Model.Result.SnapTolerance"
                               Format="#.00000" Culture="@_en" T="double" Immediate="false"
                               InputType="InputType.Number" Step="0.1"
                               Variant="Variant.Text" />
        }
            @if (pageIndex == 4)
            {
                <strong>Complex Edges</strong>
                @if (complexEdgesClasses != null)
                {
                    <SelectableItemsControl ItemProperties="@(new[]{"Name"})"
                                              SelectableItems="complexEdgesClasses" />
                }
            }
            @if (pageIndex == 5)
            {
                <strong>Switches</strong>
                   
                <table>
                    <tr>
                        <th>Is Switch</th>
                        <th>Name</th>
                        <th>Field</th>
                        <th>Type</th>
                    </tr>
                    @foreach(var node in Model.Result.Nodes)
                    {
                        <tr>
                            <td>
                                <MudCheckBox @bind-Checked="node.IsSwitch" />
                            </td>
                            <td>
                                @node.FeatureClass.Name
                            </td>
                            <td>
                                <MudSelect T="string"
                                            Label=""
                                            @bind-Value="node.Fieldname">
                                    @foreach(var field in node.FeatureClass.Fields.ToEnumerable())
                                    {
                                        @if(field.type == Framework.Data.FieldType.integer ||
                                            field.type == Framework.Data.FieldType.smallinteger ||
                                            field.type == Framework.Data.FieldType.biginteger ||
                                            field.type == Framework.Data.FieldType.boolean) 
                                        {
                                            <MudSelectItem Value="field.name">
                                                @field.name
                                            </MudSelectItem>
                                        }
                                    }
                                </MudSelect>
                            </td>
                            <td>
                                <MudSelect T="gView.Framework.Network.NetworkNodeType" 
                                            Label=""
                                            @bind-Value="node.NodeType">
                                    @foreach (gView.Framework.Network.NetworkNodeType type in Enum.GetValues(typeof(gView.Framework.Network.NetworkNodeType)))
                                    {
                                        <MudSelectItem Value="type">
                                            @type.ToString()
                                        </MudSelectItem>
                                    }
                                </MudSelect>
                            </td>
                        </tr>
                        

                    }
                </table>
                
            }
            @if (pageIndex == 6)
            {
                <strong>Weights</strong>

                <table>
                    <tr>
                        <th>Name</th>
                        <th></th>
                    </tr>
               
                    @foreach (var weight in Model.Result.Weights)
                    {
                        <tr>
                            <td>@weight.Name</td>
                            <td>
                                <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Remove" 
                                         Size="MudBlazor.Size.Small"
                                         OnClick="() => RemoveWeight(weight)" />
                            </td>
                        </tr>   
                    }
                    <tr>
                        <td></td>
                        <td>
                            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" 
                                     Size="MudBlazor.Size.Small"
                                     OnClick="AddWeight" />
                        </td>
                    </tr>
                </table>
            }
        </div>
    </FormContent>

    <DialogButtons>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Default"
                   OnClick="Close">Cancel</MudButton>
        @if(pageIndex > 0)
        {
            <MudButton Variant="Variant.Filled"
                        Color="Color.Primary"
                        OnClick="GoBack">Back</MudButton>
        }
        @if(pageIndex == 10) 
        {
            
        } 
        else
        {
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       OnClick="GoNext">Next</MudButton>
        }
    </DialogButtons>

</ModalDialogFormBase>

@code{
    private int pageIndex = 0;
    private System.Globalization.CultureInfo _en = System.Globalization.CultureInfo.GetCultureInfo("en-US");

    private SelectableEnumerable<IFeatureClass>? polylineFeatureClasses;
    private SelectableEnumerable<IFeatureClass>? pointFeatureClasses;
    private SelectableEnumerable<IFeatureClass>? complexEdgesClasses;
    private List<ISimpleNumberCalculation> _calculators = new List<ISimpleNumberCalculation>();

    async protected override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Model.FeatureDataset != null)
        {
            var elements = await Model.FeatureDataset.Elements();

            polylineFeatureClasses = elements
                                        .Where(e => e.Class is IFeatureClass fc && fc.GeometryType == GeometryType.Polyline)
                                        .Select(e => (IFeatureClass)e.Class)
                                        .ToSelectable();
            pointFeatureClasses = elements
                                        .Where(e => e.Class is IFeatureClass fc && fc.GeometryType == GeometryType.Point)
                                        .Select(e => (IFeatureClass)e.Class)
                                        .ToSelectable();

            PlugInManager pluginMan = new PlugInManager();

            // (Weight)Calculators
            foreach (var calcType in pluginMan.GetPlugins(Plugins.Type.ISimpleNumberCalculation))
            {
                ISimpleNumberCalculation calc = pluginMan.CreateInstance<ISimpleNumberCalculation>(calcType);
                if (calc == null)
                {
                    continue;
                }

                _calculators.Add(calc);
            }
        }
    }

    private void PolylineSelectionChanged()
    {
        complexEdgesClasses = polylineFeatureClasses?.SelectedElements.ToSelectable();
    }

    private void PointSelectionChanged()
    {
        if (pointFeatureClasses != null)
        {
            Model.Result.Nodes.Clear();

            foreach(var nodeClass in pointFeatureClasses.SelectedElements)
            {
                Model.Result.Nodes.Add(new CreateNetworkFeatureClassModel.ResultClass.Node(nodeClass));
            }
        }
    }

    private void AddWeight()
    {
        //Model.Result.Weights.Add()
    }

    private void RemoveWeight(gView.Framework.Network.IGraphWeight weight)
    {
        Model.Result.Weights.Remove(weight);
    }

    private void GoNext()
    {
        pageIndex++;
        StateHasChanged();
    }

    private void GoBack()
    {
        pageIndex = Math.Max(pageIndex - 1, 0);
        StateHasChanged();
    }

    private Task SubmitDialog()
    {
        return base.Submit();
    }
}