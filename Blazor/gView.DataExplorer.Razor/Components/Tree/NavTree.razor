@inherits BaseHandler
@inject IExplorerApplicationService ExplorerApplication
@inject PluginManagerService PluginManager
@inject IconService Icons
@inject EventBusService EventBus


    <MudTreeView ServerData="LoadServerData"
                  Items="TreeItems" 
                  ExpandOnDoubleClick="true" 
                  MultiSelection="false"
                  Hover="true" Dense="true">
        <ItemTemplate>
            <div style="white-space:nowrap; overflow-x:hidden;">
               <MudTreeViewItem  Value="@context"
                                  Icon=@Icons.FromString(context.Icon)
                                  LoadingIconColor="Color.Info" 
                                  CanExpand="@context.HasChildren"
                                  @bind-Expanded="@context.IsExpanded"
                                  Text="@context.Text"
                                  @onclick="@(() => OnNodeClickAsync(context))">
                </MudTreeViewItem>
            </div>
        </ItemTemplate>
    </MudTreeView>

@code {
    private HashSet<ExplorerTreeNode> TreeItems { get; set; } = new HashSet<ExplorerTreeNode>();

    protected override void OnInitialized()
    {
        base.Handle(() =>
        {
            TreeItems.Add(new ExplorerTreeNode(ExplorerApplication.RootExplorerObject));

            EventBus.OnContentItemDoubleClickAsync += HandleContentItemDoubleClickAsync;
        });
    }

    private Task OnNodeClickAsync(ExplorerTreeNode node)
    {
        return EventBus.TreeItemClickAsync(node.ExObject);
    }

    private Task HandleContentItemDoubleClickAsync(IExplorerObject exObject)
    {
        //if (SelectedNode != null)
        //{
        //    SelectedNode.IsExpanded = true;
        //}

        return Task.CompletedTask;
    }

    public Task<HashSet<ExplorerTreeNode>?> LoadServerData(ExplorerTreeNode parentNode)
    {
        return base.HandleFuncAsync(async () =>
        {
            var exObject = parentNode.ExObject;

            var childNodes = new HashSet<ExplorerTreeNode>();

            if(exObject is IExplorerParentObject)
            {
                var exParent = (IExplorerParentObject)exObject;

                foreach(var childObject in await exParent.ChildObjects())
                {
                    childNodes.Add(new ExplorerTreeNode(childObject));
                }
            }

            return childNodes;
        });
    }

    public void Dispose()
    {
        EventBus.OnContentItemDoubleClickAsync -= HandleContentItemDoubleClickAsync;
    }
}