@inherits BaseHandler
@implements IAsyncDisposable

@inject LeafletService Leaflet
@inject MapRenderService MapRenderer
@inject GeoTransformerService GeoTransformer
@inject ICartoApplicationScopeService AppScope
@inject CartoEventBusService EventBus
@inject MapControlBackgroundTilesService BackgroundTiles
@inject MapControlCrsService CrsService 

@if (MapControl != null)
{
    <LeafletMap Map="MapControl" Crs="MapControlCrs" />
}

@code{
    private LMap? MapControl { get; set; }
    private LCrs? MapControlCrs { get; set; }
    private ImageLayer? ImageLayer = null;

    private ISpatialReference _mapControlSRef = new SpatialReference("epsg:3857");
    private bool _firstRendered = false;

    protected override Task OnInitializedAsync() => HandleAsync(async () =>
    {
        await base.OnInitializedAsync();

        EventBus.OnCartoDocumentLoadedAsync += OnCartoDocumentLoadedAsync;
        EventBus.OnRefreshMapAsync += OnRefreshMapAsync;
        EventBus.OnMapSettingsChangedAsync += OnMapSettingsChanged;
        EventBus.OnMapZoomToAsync += OnMapZoomToAsync;
        MapRenderer.OnRefreshMapImage += OnRefreshMapImage;

        await OnCartoDocumentLoadedAsync(AppScope.Document);
    });

    protected override Task OnAfterRenderAsync(bool firstRender) => HandleAsync(async () =>
    {
        await base.OnAfterRenderAsync(firstRender);

        if(firstRender)
        {
            _firstRendered = true;        
        }
    });


    private Task OnCartoDocumentLoadedAsync(ICartoDocument document) => HandleAsync(async () =>
    {
        bool reused = await CreateMapControl();

        if (document.Map is Map map)
        {
            // project map sref to current leaflet map transformation
            var mapBounds = GeoTransformer.Transform(map.Envelope, map.SpatialReference, _mapControlSRef).Envelope;
            //map.SpatialReference = _mapSRef;
            //map.Envelope = mapBounds;

            MapRenderer.InitMap(map, _mapControlSRef);

            if (reused && MapControl is not null)
            {
                var boundsWgs84 = GeoTransformer.ToWGS84(new Envelope(mapBounds), _mapControlSRef).Envelope;

                await MapControl.FitBounds(new LatLng(boundsWgs84.LowerLeft.Y, boundsWgs84.LowerLeft.X),
                                           new LatLng(boundsWgs84.UpperRight.Y, boundsWgs84.UpperRight.X));
            }
        }
    });

    private Task OnRefreshMapAsync(int delay) => HandleAsync(() =>
        MapRenderer.Rerender(delay));

    private Task OnMapSettingsChanged() => HandleAsync(() =>
        MapRenderer.Rerender(300));


    private Task OnMapZoomToAsync(IEnvelope zoomTo) => HandleAsync(async () =>
    {
        if(MapControl is not null) 
        {
            var zoomToWgs84 = GeoTransformer.ToWGS84(zoomTo, _mapControlSRef).Envelope;

            await MapControl.FitBounds(
                new LatLng(zoomToWgs84.LowerLeft.Y, zoomToWgs84.LowerLeft.X),
                new LatLng(zoomToWgs84.UpperRight.Y, zoomToWgs84.UpperRight.X));
        }
    });

    async private Task OnRefreshMapImage(byte[]? data)
    {
        if (ImageLayer is null || MapControl is null)
        {
            return;
        }

        await MapControl.UpdateImageLayer(ImageLayer, $"data:image/png;base64, {Convert.ToBase64String(data ?? Array.Empty<byte>())}", null, null);
    }

    async private Task OnMapViewRest(object sender, Event e)
    {
        if (MapControl == null)
        {
            return;
        }

        using (var mutex = await FuzzyMutexAsync.LockAsync(MapControl.Id))
        {
            if (mutex.WasBlocked == false)
            {
                await Task.Delay(300);

                var bounds = await MapControl.GetBounds();
                var size = await MapControl.GetImageSize();

                if (ImageLayer == null)
                {
                    ImageLayer = new ImageLayer("", bounds.SouthWest, bounds.NorthEast) { Opacity = 0.8f };
                    await MapControl.AddLayer(ImageLayer);
                }
                else
                {
                    await MapControl.UpdateImageLayer(ImageLayer, "", bounds.SouthWest, bounds.NorthEast);
                }

                await OnRefreshMapImage(null);

                var mapBounds = GeoTransformer.FromWGS84(new Envelope(bounds.SouthWest.Lng, bounds.SouthWest.Lat, bounds.NorthEast.Lng, bounds.NorthEast.Lat), _mapControlSRef).Envelope;
                MapRenderer.SetBoundsAndSize(mapBounds, size.Width, size.Height);
                MapRenderer.BeginRender();
            }
        }
    }

    async private Task OnMapClick(LMap sender, BlazorLeaflet.Models.Events.MouseEvent e)
    {

    }

    async private Task OnBBox(LMap sender, BlazorLeaflet.Models.Events.BBoxEvent e)
    {

    }

    #region Create/Intialize Map

    public Task<bool> CreateMapControl()
    {
        bool reused = true;

        if(MapControlCrs is null)
        {
            var crsModel = CrsService.GetDefaultOrAny();
            _mapControlSRef = new SpatialReference($"epsg:{crsModel.Epsg}");

            MapControlCrs = new LCrs()
            {
                Id = crsModel.Epsg,
                Proj4Parameters =
                    $"{String.Join(" ", _mapControlSRef.Parameters)} {_mapControlSRef.Datum?.Parameter}".Trim(),
                Origin = crsModel.Origin!,
                Resolutions = crsModel.Resolutions!,
                Bounds = crsModel.Bounds
            };
        }

        if (MapControl is null)
        {
            MapControl = Leaflet.CreateMap(MapControl?.Id);
            MapControl.OnIntialized += OnMapControlInitialized;

            //LeafletMap.OnViewReset += OnMapViewRest;
            MapControl.OnZoomEnd += OnMapViewRest;
            MapControl.OnMoveEnd += OnMapViewRest;

            MapControl.OnClick += OnMapClick;
            MapControl.OnBBox += OnBBox;

            reused = false;
        }

        //ImageLayer = null;

        return Task.FromResult(reused);
    }

    private Task OnMapControlInitialized() => HandleAsync(async () =>
    {
        var tiles = BackgroundTiles.GetDefaultOrAny();

        await MapControl!.AddLayer(new gView.Razor.Leaflet.Models.Layers.TileLayer()
        {
            UrlTemplate = tiles.UrlTemplate,
            Attribution = tiles.Attribution,
            Opacity = Math.Max(tiles.Opacity, 0.1),
            MinimumZoom = tiles.MinZoom,
            MaximumZoom = tiles.MaxZoom > 0
                ? tiles.MaxZoom
                : MapControlCrs?.Resolutions.Length - 1 ?? tiles.MaxNativeZoom,
            MaxNativeZoom = tiles.MaxNativeZoom,
            TileSize = tiles.TileSize?.Length == 2 && tiles.TileSize[0] > 0 && tiles.TileSize[1] > 0
                ? new gView.Razor.Leaflet.Models.Size(tiles.TileSize[0], tiles.TileSize[1])
                : new gView.Razor.Leaflet.Models.Size(256, 256)
        });

        var boundsWgs84 = MapControlCrs?.Bounds?.Length == 4
                ? GeoTransformer.ToWGS84(
                                new Envelope(MapControlCrs.Bounds[0], MapControlCrs.Bounds[1],
                                             MapControlCrs.Bounds[2], MapControlCrs.Bounds[3]),
                                _mapControlSRef
                            ).Envelope
                : new Envelope(-180, -80, 180, 80);

        await MapControl.FitBounds(new LatLng(boundsWgs84.LowerLeft.Y, boundsWgs84.LowerLeft.X),
                               new LatLng(boundsWgs84.UpperRight.Y, boundsWgs84.UpperRight.X));

    });

    #endregion

    #region Dispose / Destroy

    async public ValueTask DisposeAsync()
    {
        EventBus.OnCartoDocumentLoadedAsync -= OnCartoDocumentLoadedAsync;
        EventBus.OnRefreshMapAsync -= OnRefreshMapAsync;
        EventBus.OnMapSettingsChangedAsync -= OnMapSettingsChanged;
        EventBus.OnMapZoomToAsync -= OnMapZoomToAsync;
        MapRenderer.OnRefreshMapImage -= OnRefreshMapImage;

        await DestroyMapControl();
    }

    async public ValueTask DestroyMapControl()
    {
        if (MapControl != null)
        {
            MapControl.OnIntialized -= OnMapControlInitialized;

            //LeafletMap.OnViewReset -= OnMapViewRest;
            MapControl.OnZoomEnd -= OnMapViewRest;
            MapControl.OnMoveEnd -= OnMapViewRest;

            MapControl.OnClick -= OnMapClick;
            MapControl.OnBBox -= OnBBox;

            if (_firstRendered) {
                await MapControl.Destroy();
            }

            ImageLayer = null;
        }
    }

    #endregion
}