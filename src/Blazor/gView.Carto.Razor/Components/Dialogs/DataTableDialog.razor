@using gView.Framework.Core.Data.Cursors
@using gView.Framework.Data.Filters

@inherits ModalDialogFormBase<DataTableModel>
@implements IDisposable

@inject ICartoApplicationScopeService AppScope

<ModalDialogFormBase T="DataTableModel" ContentStyle="DialogContentStyle.Full"
                     OnDialogClose="base.OnDialogClose"
                     Model="base.Model">
    <DialogBody>
        @if (_tableClass is not null 
            && _tableFields is not null)
        {
            <MudTable Items="_rows" Dense="true" Hover="true"
                      MultiSelection="_tableClass is IFeatureClass"
                      @bind-SelectedItems="_selectedRows"
                      Filter="new Func<IRow,bool>(FilterFunc)"
                      FixedHeader="true" 
                      Height="70vh" 
                      Virtualize="true">
                <ToolBarContent>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary"
                           OnClick="SetFilter"
                           StartIcon="@Icons.Material.Filled.QueryBuilder">Filter</MudButton>
                    @if(!string.IsNullOrEmpty(_filterWhereClause))
                    {
                        <MudButton Variant="Variant.Filled" Color="Color.Secondary"
                               OnClick="UnsetFilter"
                               StartIcon="@Icons.Material.Filled.Remove">Remove Filter</MudButton>
                    }
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchString"
                                  Placeholder="Filter loaded rows" 
                                  Adornment="Adornment.Start" 
                                  AdornmentIcon="@Icons.Material.Filled.Search" 
                                  IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>

                    </MudTh>
                    @foreach(var field in _tableFields)
                    {
                        <MudTh>
                            <MudTableSortLabel SortBy="new Func<IRow, object>((e) => e[field.name])">
                                 @field.name
                            </MudTableSortLabel>
                            @*<MudText Typo="Typo.body2" Color="Color.Primary">
                                @field.name
                            </MudText>
                            
                            <MudTextField @bind-Value="_columnFilters[field.name]"
                                          Label="Filter..." />*@
                        </MudTh>
                    }
                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Search" 
                                       Size="MudBlazor.Size.Small"
                                       Color="Color.Primary"
                                       aria-label="zoomto">
                        </MudIconButton>
                    </MudTd>
                    @foreach(var field in _tableFields)
                    {
                        <MudTd DataLabel="@field.name">@context[field.name]</MudTd>
                    }
                </RowTemplate>
            </MudTable>
        }
    </DialogBody>
    <DialogButtons>
        <GvGrid ColumnCount="@(_hasMore ? 2 : 1)">
            <GvGridItem>
                <MudText Typo="Typo.body1">@($"Loaded {_rows.Count} items")</MudText>
            </GvGridItem>
            @if(_hasMore)
            {
                <GvGridItem>
                    <MudButton Variant="Variant.Filled" Style="float:right"
                               OnClick="() => LoadData()">Load more...</MudButton>
                </GvGridItem>
            }
        </GvGrid>
    </DialogButtons>
</ModalDialogFormBase>

@code {
    private ITableClass? _tableClass;
    private IEnumerable<IField>? _tableFields;
    private ICursor? _cursor;

    private Dictionary<string, string> _columnFilters = new();
    private List<IRow> _rows = new();
    private HashSet<IRow> _selectedRows = new HashSet<IRow>();
    private bool _hasMore = false;
    private string _filterWhereClause = "";
    private string _searchString = "";

    async protected override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (Model?.Layer?.Class is not ITableClass)
        {
            return;
        }

        _tableClass = (ITableClass)Model.Layer.Class;
        _tableFields = _tableClass.Fields.ToEnumerable();

        foreach (var field in _tableFields)
        {
            _columnFilters[field.name] = String.Empty;
        }

        await CreateCursor();
        await LoadData();
    }

    async private Task CreateCursor()
    {
        ReleaseCursor();
        _rows.Clear();

        if(_tableClass is null)
        {
            return;
        }

        var queryFilter = new QueryFilter()
        {
            SubFields = "*"
        };

        if(Model.Layer is IFeatureLayer featureLayer)
        {
            queryFilter.WhereClause = featureLayer.FilterQuery?.WhereClause;
        }

        queryFilter.WhereClause = string.IsNullOrEmpty(queryFilter.WhereClause)
            ? _filterWhereClause
            : string.IsNullOrEmpty(_filterWhereClause)
                ? queryFilter.WhereClause
                : $"({queryFilter.WhereClause}) and ({_filterWhereClause})";

        _cursor = await _tableClass.Search(queryFilter);
    }

    private void ReleaseCursor()
    {
        if(_cursor is not null)
        {
            _cursor.Dispose();
        }

        _cursor = null;
    }

    private async Task LoadData(int count = 10000)
    {
        _hasMore = false;

        if (_cursor is null)
        {
            return;
        }

        for (int i = 0; i < count; i++)
        {
            var row = _cursor switch
            {
                IFeatureCursor featureCursor => await featureCursor.NextFeature(),
                IRowCursor rowCursor => await rowCursor.NextRow(),
                _ => null
            };

            if (row is null)
            {
                ReleaseCursor();
                return;
            }

            _rows.Add(row);

            if (_rows.Count % 100 == 0)
            {
                await ForceRenderComponent();
            }
        }

        _hasMore = true;
    }

    private async Task SetFilter()
    {
        var model = await AppScope.ShowModalDialog(typeof(QueryBuilderDialog),
            "Query Builder",
            new QueryBuilderModel()
            {
                QueryString = _filterWhereClause,
                TableClass = _tableClass
            });

        if(model is not null)
        {
            _filterWhereClause = model.QueryString;

            await CreateCursor();
            await LoadData();
        }
    }

    private async Task UnsetFilter()
    {
        _filterWhereClause = _searchString = "";

        await CreateCursor();
        await LoadData();
    }

    private bool FilterFunc(IRow row)
    {
        if(_tableFields is null)
        {
            return false;
        }

        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        var searchStringWords = _searchString
                                    .Split(' ')
                                    .Where(s => !string.IsNullOrWhiteSpace(s))
                                    .ToArray();

        foreach (var searchStringWord in searchStringWords)
        {
            bool found = false;

            foreach(var field in _tableFields)
            {
                var val = row[field.name];

                found = val switch
                {
                    string str => str.Contains(searchStringWord, StringComparison.OrdinalIgnoreCase),
                    _ => val?.ToString() == searchStringWord
                };

                if(found) { break; }
            }

            if(!found)
            {
                return false;
            }
        }

        return true;
    }

    public void Dispose()
    {
        ReleaseCursor();
    }
}