@inherits BaseHandler

@inject IApplicationScope AppScope

@if (_renderer is not null)
{
    <GvCard Title="Symbology">
        <GvCardContent>
            <QuickSymbolPropertiesControl Symbol="_renderer.Symbol"
                                          SymbolChanged="OnSymbolChanged"/>
        </GvCardContent>
    </GvCard>

    @if (_renderer.Symbol is ISymbolCollection)
    {
        <GvCard Title="Cartography">
            <GvCardContent>
            <MudSelect T="SimpleRenderer.CartographicMethod" 
                       Label="Ordering"
                       @bind-Value="_renderer.CartoMethod" >
                @(GvUtilities.EnumToSelectItems<SimpleRenderer.CartographicMethod>())
            </MudSelect>
        </GvCardContent>
    </GvCard>
    }

    <GvCard Title="Advanced">
        <GvCardContent>
            <MudButton OnClick="SetRotation"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@(!_layer.CanRotateSymbols())">
                Rotation
            </MudButton>
        </GvCardContent>
    </GvCard>
}

@code {
    [Parameter] public object? Instance { get; set; }

    private IFeatureLayer? _layer;
    private SimpleRenderer? _renderer;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Instance is IFeatureLayer fLayer)
        {
            _layer = fLayer;
            _renderer = fLayer.FeatureRenderer as SimpleRenderer;
        }
        else
        {
            _renderer = Instance as SimpleRenderer;
        }
    }

    private void OnSymbolChanged(ISymbol symbol)
    {
        if(_renderer is not null)
        {
            _renderer.Symbol = symbol;
        }
    }

    private Task SetRotation() => HandleAsync(() =>
        _renderer?.SymbolRotation.EditProperties(AppScope, _layer?.FeatureClass)
        ?? Task.CompletedTask);
}