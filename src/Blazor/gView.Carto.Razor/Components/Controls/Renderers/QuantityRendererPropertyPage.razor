@using gView.Carto.Razor.Components.Controls.Renderers.Models
@using gView.Framework.Core.Data.Cursors
@using gView.Framework.Data.Filters

@inherits BaseHandler
@implements IDisposable

@inject IApplicationScope AppScope

@if (_renderer is not null && _layer?.FeatureClass is not null)
{
    <KeySymbolListControl TKey="RangeClass"
                          KeySymbols="@(CurrentKeySymbolsList() ?? [])"
                          OnKeySymbolsChanged="SymbolsListChanged">
        <ListItemTools>
            <GvGrid ColumnCount="2">
                <GvGridItem>
                    <MudSelect T="string" Label="Value Field"
                               Value="_renderer.ValueField"
                               ValueChanged="(val) => OnValueFieldChanged(val)">
                        @GvUtilities.StringsToSelectItems(_layer.FeatureClass
                                 .Fields?
                                 .ToEnumerable()
                                 .Select(f => f.name) ?? [])
                    </MudSelect>
                </GvGridItem>
                <GvGridItem>

                </GvGridItem>
            </GvGrid>
            <GvGrid ColumnCount="4">
                <GvGridItem>
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Filled"
                               OnClick="OnAddAllItems">Add All Values</MudButton>
                </GvGridItem>
                <GvGridItem>
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Filled"
                               OnClick="() => _addValueItem = new()">Add Value</MudButton>
                </GvGridItem>
                <GvGridItem>
                    <MudButton Color="Color.Primary"
                               Variant="Variant.Filled"
                               OnClick="OnAddAllOtherValuesItem">Add "All other"</MudButton>
                </GvGridItem>
                <GvGridItem>
                    <MudButton Color="Color.Secondary"
                               Variant="Variant.Filled"
                               OnClick="OnRemoveAllItems">Remove all</MudButton>
                </GvGridItem>
            </GvGrid>
            <MudText Typo="Typo.h6">
                @($"{_dictKeySymbols.IfKeyExists(_renderer.ValueField, (l) => l.Count)} items")
            </MudText>

            @if (_addValueItem is not null)
            {
                <GvCard Title="Add Value Item">
                    <GvCardContent>
                        <GvGrid ColumnCount="2">
                            <GvGridItem>
                                <MudTextField Label="@_renderer.ValueField"
                                              @bind-Value="_addValueItem.Key"></MudTextField>
                            </GvGridItem>
                            <GvGridItem>
                                <MudTextField Label="Label Text"
                                              @bind-Value="_addValueItem.LabelText"></MudTextField>
                            </GvGridItem>
                        </GvGrid>
                    </GvCardContent>
                    <GvCardActions>
                        <MudButton Variant="Variant.Filled"
                                   OnClick="() => _addValueItem = null">Cancel</MudButton>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   OnClick="OnAddValueItem">Add</MudButton>
                    </GvCardActions>
                </GvCard>
            }
        </ListItemTools>
    </KeySymbolListControl>
    <GvGrid ColumnCount="2">
        <GvGridItem>
            <MudButton OnClick="SetRotation"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Disabled="@(!_layer.CanRotateSymbols())">
                Rotation
            </MudButton>
        </GvGridItem>
        <GvGridItem>
            @* <MudButton OnClick="SetCartographicsMethod"
                       Variant="Variant.Filled"
                       Color="Color.Primary">
                Cartography
            </MudButton> *@
        </GvGridItem>
    </GvGrid>
}

@code {
    [Parameter] public object? Instance { get; set; }

    private IFeatureLayer? _layer;
    private QuantityRenderer? _renderer;

    private Dictionary<string, List<KeySymbol<RangeClass>>> _dictKeySymbols = new();
    private ValueItemModel? _addValueItem = null;

    protected override Task OnParametersSetAsync() => HandleAsync(async () =>
    {
        await base.OnParametersSetAsync();

        if (Instance is IFeatureLayer fLayer)
        {
            _layer = fLayer;
            _renderer = fLayer.FeatureRenderer as QuantityRenderer;

            if (_renderer is not null)
            {
                _renderer.GeometryType = _layer.LayerGeometryType;
                if (String.IsNullOrEmpty(_renderer.ValueField))
                {
                    _renderer.ValueField = _layer.FeatureClass?.IDFieldName ?? "";
                }
            }
        }
        else
        {
            _renderer = Instance as QuantityRenderer;
        }

        if (_renderer is not null)
        {
            var keySymbols = CurrentKeySymbolsList();
            keySymbols.Clear();

            int index = 0;
            foreach (var quantityClass in _renderer.QuantityClasses)
            {
                var symbol = quantityClass.Symbol?.Clone() as ISymbol;

                if (symbol is not null)
                {
                    keySymbols.Add(new KeySymbol<RangeClass>(
                        new RangeClass(quantityClass.Min, quantityClass.Max), symbol));
                }
                index++;
            }
        }
    });

    private void ApplyChanges()
    {
        if (_renderer is null)
        {
            return;
        }

        _renderer.QuantityClasses
                 .ForEach(qClass => _renderer.RemoveClass(qClass));

        var keySymbols = CurrentKeySymbolsList();
        keySymbols.ForEach((keySymbol) 
             => _renderer.AddClass(
                     new QuantityRenderer.QuantityClass(
                        keySymbol.Key.Min,
                        keySymbol.Key.Max,
                        keySymbol.Symbol.Clone() as ISymbol
                     )
                 )
            );
    }

    private void SymbolsListChanged(List<KeySymbol<RangeClass>> keySymbols)
    {
        if (_renderer is null)
        {
            return;
        }

        _dictKeySymbols[_renderer.ValueField] = keySymbols;
        ApplyChanges();
    }

    private void OnValueFieldChanged(string field)
    {
        if (_renderer is not null)
        {
            _renderer.ValueField = field;

            CurrentKeySymbolsList();
        }
    }

    #region Button Events

    private Task OnAddAllItems() => HandleAsync(async () =>
    {
        // if (_renderer is null || _layer?.FeatureClass is null)
        // {
        //     return;
        // }

        // OnRemoveAllItems();
        // var keySymbols = CurrentKeySymbolsList();

        // await this.ForceRenderComponent();

        // DistinctFilter filter = new DistinctFilter(_renderer.ValueField);
        // filter.OrderBy = _renderer.ValueField;

        // using (IFeatureCursor cursor = (IFeatureCursor)await _layer.FeatureClass.Search(filter))
        // {
        //     int counter = 0;
        //     IFeature feature;
        //     while ((feature = await cursor.NextFeature()) is not null)
        //     {
        //         var key = feature.Fields[0].Value?.ToString() ?? "";

        //         var symbol = RendererFunctions.CreateStandardSymbol(_layer.LayerGeometryType);

        //         if (symbol is null)
        //         {
        //             continue;
        //         }
        //         if (symbol is ILegendItem legendItem)
        //         {
        //             legendItem.LegendLabel = key;
        //         }

        //         keySymbols.Add(new KeySymbol<RangeClass>(key, symbol));

        //         if (++counter % 100 == 0)
        //         {
        //             await ForceRenderComponent();
        //         }
        //     }
        // }

        // ApplyChanges();
    });

    private void OnRemoveAllItems() => Handle(() =>
    {
        if (_renderer is null)
        {
            return;
        }

        _dictKeySymbols.RemoveIfExists(_renderer.ValueField, (keySymbols) =>
            keySymbols?.ForEach((keySymbol)
                => keySymbol.Symbol?.Release())
        );

        CurrentKeySymbolsList();

        ApplyChanges();
    });

    private void OnAddAllOtherValuesItem() => Handle(() =>
    {
        // if (_renderer is null)
        // {
        //     return;
        // }

        // var keySymbols = CurrentKeySymbolsList();

        // keySymbols.Any(k => k.Key == ValueMapRenderer.AllOtherValuesKey)
        //           .ThrowIfTrue(() => "All other values item is already added");

        // var symbol = RendererFunctions.CreateStandardSymbol(_renderer.GeometryType)
        //                           .AddLegendLabel(ValueMapRenderer.AllOtherValuesLabel);

        // keySymbols.Add(new KeySymbol(ValueMapRenderer.AllOtherValuesKey, symbol));

        // ApplyChanges();

    });

    private void OnAddValueItem() => Handle(() =>
    {
        // if (_renderer is not null
        //     && _layer is not null
        //     && _addValueItem is not null)
        // {
        //     var keySymbols = CurrentKeySymbolsList();

        //     _addValueItem.Key = _addValueItem.Key.Trim();

        //     keySymbols.Any(k => k.Key == _addValueItem.Key)
        //               .ThrowIfTrue(() => $"Item {_addValueItem.Key} already exists");

        //     var symbol = RendererFunctions
        //                     .CreateStandardSymbol(_layer.LayerGeometryType)
        //                     .ThrowIfNull(() => $"Can't create a symbol for {_layer.LayerGeometryType} geometry")
        //                     .AddLegendLabel(_addValueItem.LabelText);

        //     keySymbols.Add(new KeySymbol(_addValueItem.Key, symbol));

        //     ApplyChanges();
        // }
        // _addValueItem = null;
    });

    private Task SetRotation() => HandleAsync(() =>
        _renderer?.SymbolRotation.EditProperties(AppScope, _layer?.FeatureClass)
        ?? Task.CompletedTask);

    // private Task SetCartographicsMethod() => HandleAsync(async () =>
    // {
    //     if (_renderer is null)
    //     {
    //         return;
    //     }

    //     var model = await AppScope.ShowModalDialog
    //         (typeof(LegendGroupCartographicMethodDialog),
    //         "Cartographic Method",
    //         new LegendGroupCartographicMethodModel()
    //             {
    //                 CartographicMethod = _renderer.CartoMethod
    //             },
    //         new ModalDialogOptions()
    //             {
    //                 Width = ModalDialogWidth.ExtraSmall
    //             });

    //     if (model is not null)
    //     {
    //         _renderer.CartoMethod = model.CartographicMethod;
    //     }
    // });

    #endregion

    #region Helper

    private List<KeySymbol<RangeClass>> CurrentKeySymbolsList()
    {
        if (_renderer is not null)
        {
            if (!_dictKeySymbols.ContainsKey(_renderer.ValueField))
            {
                _dictKeySymbols[_renderer.ValueField] = [];
            }

            return _dictKeySymbols[_renderer.ValueField];
        }

        return [];
    }

    #endregion

    #region IDisposable

    public void Dispose()
    {
        _dictKeySymbols.ForEach((key, keySymbols) =>
            keySymbols.ForEach((keySymbol) => keySymbol.Symbol?.Release())
        );
        _dictKeySymbols.Clear();
    }

    #endregion
}