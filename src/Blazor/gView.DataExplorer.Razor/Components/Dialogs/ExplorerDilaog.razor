@inherits ModalDialogFormBase<ExplorerDialogModel>
@inject IconService Icons
@inject IExplorerApplicationScopeService AppScope
@inject PluginManagerService PluginManager

<ModalDialogFormBase T="ExplorerDialogModel"
                      OnDialogClose="base.OnDialogClose"
                      Model="base.Model">
    <DialogBody>
        @if(_isSubmitting)
        {
            <div>Submitting...</div>
        }
        else if (selectedRoot is not null)
        {
            currentListExplorerObjects.Clear();
            currentListExplorerObjects.AddRange(
                    selectedRoot is IExplorerParentObject parentObject
                        ? parentObject.SecureChildObjectsAsync().Result
                            .Where(e=>e is not IExplorerObjectDoubleClick)
                            .ToArray()
                        : Array.Empty<IExplorerObject>()
                );

            if(selectedFilter is not null)
            {
                currentListExplorerObjects = selectedFilter.FilterExplorerObjects(currentListExplorerObjects).ToList();
            }

            if (Model.Mode == ExploerDialogMode.Save)
            {
                placeToSave = (selectedFilter != null && selectedRoot != null && selectedFilter.Match(selectedRoot).Result == true);
                Model.Result.ExplorerObjects.ReplaceItems(placeToSave && selectedRoot != null ? 
                        new[] { selectedRoot } : 
                        Array.Empty<IExplorerObject>());
            }
            
            <MudToolBar>
                <div style="width:100%">
                    <MudSelect @bind-Value="@selectedRoot"
                               Label="Folder/Path"
                               Class="explorer-dialog-root-select"
                               Variant="Variant.Outlined"
                               Dense="true">

                        @{ var level = 0; }
                        @foreach (var parent in selectedRoot!.GetParents(true).Reverse())
                        {
                            <MudSelectItem Value="@parent">
                                <div class="explorer-dialog-root-select-item" style="display: flex; align-items: center; padding-left:@((level++) * 24)px">
                                    <MudIcon Icon="@Icons.FromString(parent.Icon)" Style="margin-right: 6px;" />
                                    <MudText>@parent.Name</MudText>
                                </div>
                            </MudSelectItem>
                        }

                    </MudSelect>
                </div>
                
                <MudSpacer />
                <MudIconButton Icon="@Icons.FromString("basic:refresh")"
                               OnClick="RefreshList"/>
               
                @if (creatableExplorerTools?.Where(e => e.CanCreate(selectedRoot!)).Any() == true)
                {
                    <MudMenu Icon="@MudBlazor.Icons.Material.Filled.Add">
                        @foreach (var creatable in creatableExplorerTools?.Where(e => e.CanCreate(selectedRoot!))!)
                        {
                            <MudMenuItem Icon="@Icons.FromString(creatable.Icon)"
                                         OnClick="async () => await CreateClickAsync(creatable)">
                                @creatable.Type
                            </MudMenuItem>
                        }
                    </MudMenu>
                }
                
            </MudToolBar>

            <MudPaper Elevation="2">
                    <MudList Clickable="true" Style="width:900px;max-width:100%;height:420px;overflow:auto" Dense="true">
                        @if (selectedRoot?.ParentExplorerObject is not null)
                        {
                            <MudListItem @ondblclick="MoveUp">
                                <div style="display: flex; align-items: center;">
                                    <MudIcon Icon="@Icons.FromString("basic:triangle-left-up")" Style="margin-right: 6px;" />
                                    <MudText>..</MudText>
                                </div>
                            </MudListItem>
                        }
                        @foreach (var exObject in currentListExplorerObjects)
                        {
                            <MudListItem Class="@($"explorer-dialog-item {(Model.Result.ExplorerObjects.Contains(exObject) ? "selected" : "")}")"
                                          OnClick="async (mEvent) => await ListItemClick(mEvent, exObject)" 
                                          @ondblclick="() => ListItemDoubleClick(exObject)" >
                                <div style="display: flex; align-items: center;" >
                                    <MudIcon Icon="@Icons.FromString(exObject.Icon)" Style="margin-right: 6px;" />
                                    <MudText>@exObject.Name</MudText>
                                </div>
                            </MudListItem>
                        }
                    </MudList>
            </MudPaper>

            @if(Model.Mode == ExploerDialogMode.Open) 
            {
                    <MudTextField Value="@String.Join(", ",Model.Result.ExplorerObjects.Select(e => e.Name))" 
                                  Label="Selected"
                                  Required="true"
                                  ReadOnly="true" 
                                  Variant="Variant.Filled" />
            } 
            else if(Model.Mode == ExploerDialogMode.Save)
            {
                <MudTextField @bind-Value = "Model.Result.Name" 
                              Required = "true"
                              Label = "Name"
                              Disabled = "@(!placeToSave)"
                              Variant = "Variant.Outlined" />
            }

            @if (Model.Filters?.Any() == true)
            {
                <MudSelect T="ExplorerDialogFilter" 
                           Value="selectedFilter"
                           Variant="Variant.Outlined" 
                           Label="Filter" 
                           ValueChanged="(value) => FilterSelectionChanged(value)">
                    @foreach (var filter in Model.Filters)
                    {
                        <MudSelectItem Value="@filter" />
                    }
                </MudSelect>
            }
        }
    </DialogBody>
    <DialogButtons>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Default"
                   OnClick="Close">Cancel</MudButton>
        @if(Model.Mode == ExploerDialogMode.Save)
        {
            <MudButton Variant="Variant.Filled"
                       Disabled="@(placeToSave == false || String.IsNullOrEmpty(Model.Result.Name))"
                       Color="Color.Primary"
                       OnClick="Apply">@(_isSubmitting ? "Creating..." : "Create")</MudButton>
        } 
        else 
        {
            <MudButton Variant="Variant.Filled"
                        Disabled="Model.Result.ExplorerObjects.Count == 0"
                        Color="Color.Primary"
                        OnClick="Apply">@(_isSubmitting ? "Loading..." : "Open")</MudButton>
        }
    </DialogButtons>
</ModalDialogFormBase>

@code {
    private List<IExplorerObject> currentListExplorerObjects = new();
    private IExplorerObject? selectedRoot;
    private ExplorerDialogFilter? selectedFilter;
    private IExplorerObjectCreatable[]? creatableExplorerTools;

    private bool placeToSave = false;
    private bool _isSubmitting = true;

    protected override void OnInitialized() => Handle(() =>
    {
        //await Task.Delay(2000);
        _isSubmitting = false;

        #region Initialize Select

        ;

        selectedRoot = AppScope.RootExplorerObject(
            String.Join("|", Model.Filters?
                .Where(f => !String.IsNullOrEmpty(f.FileFilter))
                .Select(f => f.FileFilter)
                .ToArray() ?? [""]));

        selectedFilter = Model.Filters?.FirstOrDefault();

        #endregion

        creatableExplorerTools = PluginManager.GetPlugins<IExplorerObject>(Framework.Common.Plugins.Type.IExplorerObject)
                                              .Where(e => e is IExplorerObjectCreatable)
                                              .Select(e => (IExplorerObjectCreatable)e)
                                              .ToArray();
    });

    private Task ListItemDoubleClick(IExplorerObject exObject) => HandleAsync (async () =>
    {
        if (exObject is IExplorerParentObject)
        {
            selectedRoot = exObject;
            await base.ForceRenderComponent(); // refresh the MudSelect Tree, otherwise it displays item wrong!?

            Model.Result.ExplorerObjects.Clear();
        }

        if (Model.Mode == ExploerDialogMode.Open
            && Model.Result.ExplorerObjects.Count() == 1
            && Model.Result.ExplorerObjects.First() == exObject)
        {
            // open this item
            await Apply();
        }
    });

    private Task ListItemClick(MouseEventArgs mEvent, IExplorerObject exObject) => HandleAsync(async () =>
    {
        if (Model.Mode == ExploerDialogMode.Open)
        {
            List<IExplorerObject> matchingExplorerObjects = new();

            #region Collect filter matching list items

            if (selectedFilter != null)
            {
                foreach (var item in currentListExplorerObjects)
                {
                    if (await selectedFilter.Match(exObject))
                    {
                        matchingExplorerObjects.Add(item);
                    }
                }
            }

            #endregion

            if (matchingExplorerObjects.Contains(exObject))
            {
                Model.Result.ExplorerObjects.ReplaceItems(
                    exObject.AddToSelection(Model.Result.ExplorerObjects,
                                            matchingExplorerObjects,
                                            mEvent switch
                                            {
                                                { ShiftKey: true } => GenericAddToStrategy.AddAllBetweenLastItem,
                                                { CtrlKey: true } => GenericAddToStrategy.AddOrRemoveIfExists,
                                                _ => GenericAddToStrategy.RemoveOthers
                                            }));
            }
            else
            {
                Model.Result.ExplorerObjects.Clear();
            }
        }
        else if(Model.Mode == ExploerDialogMode.Save)
        {
            Model.Result.Name =
                (selectedFilter is not null && await selectedFilter.CanOverWrite(exObject))
                ? exObject.Name
                : "";
        }
    });

    async private Task RefreshList()
    {
        if(selectedRoot is IExplorerParentObject parent)
        {
            await parent.DiposeChildObjects();
        }
    }

    private void MoveUp() => Handle(() =>
    {
        if (selectedRoot?.ParentExplorerObject is not null)
        {
            selectedRoot = selectedRoot.ParentExplorerObject;

            Model.Result.ExplorerObjects.Clear();
        }
    });

    private Task CreateClickAsync(IExplorerObjectCreatable creatable) => base.HandleAsync(async () =>
    {
        if (selectedRoot is not null)
        {
            var newExObject = await creatable.CreateExplorerObjectAsync(AppScope, selectedRoot);
            if (newExObject != null)
            {
                await RefreshList();
            }
        }
    });

    private void FilterSelectionChanged(ExplorerDialogFilter filter)
    {
        selectedFilter = filter;
        Model.Result.ExplorerObjects.Clear();
    }

    async private Task Apply()
    {
        if (_isSubmitting) 
        {
            return;
        }

        _isSubmitting = true;

        await ForceRenderComponent();

        await base.Submit();
    }
}